diff --git a/dist/vite.js b/dist/vite.js
index d6d41ee82d5bdee34eabfb9b650b7d203b427880..16673e9132c4679209f2c6cd7fb86caaaf302d92 100644
--- a/dist/vite.js
+++ b/dist/vite.js
@@ -918,7 +918,8 @@ var getStylesForFiles = async ({
   viteDevServer,
   rootDirectory,
   cssModulesManifest,
-  files
+  files,
+  loadModule
 }) => {
   let vite2 = getVite();
   let viteMajor = parseInt(vite2.version.split(".")[0], 10);
@@ -950,7 +951,7 @@ var getStylesForFiles = async ({
   for (let dep of deps) {
     if (dep.file && isCssFile(dep.file) && !isCssUrlWithoutSideEffects(dep.url)) {
       try {
-        let css = isCssModulesFile(dep.file) ? cssModulesManifest[dep.file] : (await viteDevServer.ssrLoadModule(
+        let css = isCssModulesFile(dep.file) ? cssModulesManifest[dep.file] : (await loadModule(viteDevServer,
           // We need the ?inline query in Vite v6 when loading CSS in SSR
           // since it does not expose the default export for CSS in a
           // server environment. This is to align with non-SSR
@@ -1025,7 +1026,8 @@ var getStylesForUrl = async ({
   entryClientFilePath,
   cssModulesManifest,
   build,
-  url: url2
+  url: url2,
+  loadModule
 }) => {
   if (url2 === void 0 || url2.includes("?_data=")) {
     return void 0;
@@ -1044,7 +1046,8 @@ var getStylesForUrl = async ({
       path5.relative(rootDirectory, entryClientFilePath),
       // Then include any styles from the matched routes
       ...documentRouteFiles
-    ]
+    ],
+    loadModule
   });
   return styles;
 };
@@ -2428,6 +2431,23 @@ var reactRouterVitePlugin = () => {
       routes
     };
   };
+  const HELPER_ENVIRONMENT_NAME = '__react_router_helper__';
+  const loadModule = (viteDevServer, url) => {
+    if (ctx.reactRouterConfig.future.unstable_viteEnvironmentApi) {
+      const vite = getVite();
+      const helperEnvironment =
+        viteDevServer.environments?.[HELPER_ENVIRONMENT_NAME];
+
+      invariant(
+        helperEnvironment && vite.isRunnableDevEnvironment(helperEnvironment),
+        "Missing helper environment"
+      );
+
+      return helperEnvironment.runner.import(url);
+    }
+
+    return viteDevServer.ssrLoadModule(url);
+  };
   return [
     {
       name: "react-router",
@@ -2535,7 +2555,10 @@ var reactRouterVitePlugin = () => {
           // https://vitejs.dev/config/server-options#server-fs-allow
           server: viteUserConfig.server?.fs?.allow ? { fs: { allow: defaultEntries } } : void 0,
           ...ctx.reactRouterConfig.future.unstable_viteEnvironmentApi ? {
-            environments,
+            environments: {
+              ...environments,
+              [HELPER_ENVIRONMENT_NAME]: {}
+            },
             build: {
               // This isn't honored by the SSR environment config (which seems
               // to be a Vite bug?) so we set it here too.
@@ -2605,6 +2628,7 @@ var reactRouterVitePlugin = () => {
         }
         viteChildCompiler = await vite2.createServer({
           ...viteUserConfig,
+          cacheDir: 'node_modules/.vite-child-compiler',
           mode: viteConfig.mode,
           server: {
             watch: viteConfig.command === "build" ? null : void 0,
@@ -2616,7 +2640,19 @@ var reactRouterVitePlugin = () => {
           plugins: [
             ...(childCompilerConfigFile.config.plugins ?? []).flat().filter(
               (plugin2) => typeof plugin2 === "object" && plugin2 !== null && "name" in plugin2 && plugin2.name !== "react-router" && plugin2.name !== "react-router:route-exports" && plugin2.name !== "react-router:hmr-updates"
-            )
+            ),
+            {
+              name: 'react-router:omit-optimize-deps',
+              config(userConfig) {
+                if (ctx.reactRouterConfig.future.unstable_viteEnvironmentApi) {
+                  for (const environmentName of Object.keys(userConfig.environments ?? {})) {
+                    userConfig.environments[environmentName].optimizeDeps = { noDiscovery: true }
+                  }
+                } else {
+                  userConfig.optimizeDeps = { noDiscovery: true }
+                }
+              }
+            }
           ]
         });
         await viteChildCompiler.pluginContainer.buildStart({});
@@ -2655,7 +2691,8 @@ var reactRouterVitePlugin = () => {
               viteDevServer,
               cssModulesManifest,
               build,
-              url: url2
+              url: url2,
+              loadModule
             });
           },
           // If an error is caught within the request handler, let Vite fix the
@@ -3161,7 +3198,7 @@ var reactRouterVitePlugin = () => {
         let route = getRoute(ctx.reactRouterConfig, file);
         let hmrEventData = { route: null };
         if (route) {
-          let serverManifest = (await server.ssrLoadModule(virtual.serverManifest.id)).default;
+          let serverManifest = (await loadModule(server, virtual.serverManifest.id)).default
           let oldRouteMetadata = serverManifest.routes[route.id];
           let newRouteMetadata = await getRouteMetadata(
             cache,
@@ -3913,7 +3950,16 @@ async function getEnvironmentOptionsResolvers(ctx, buildManifest, viteCommand) {
         rollupOptions: {
           input: (ctx.reactRouterConfig.future.unstable_viteEnvironmentApi ? viteUserConfig.environments?.ssr?.build?.rollupOptions?.input : viteUserConfig.build?.rollupOptions?.input) ?? virtual.serverBuild.id
         }
-      }
+      },
+      optimizeDeps: viteUserConfig.environments?.ssr?.optimizeDeps?.noDiscovery === false ? {
+        entries: [
+          vite2.normalizePath(ctx.entryServerFilePath),
+          ...Object.values(ctx.reactRouterConfig.routes).map((route) =>
+            resolveRelativeRouteFilePath(route, ctx.reactRouterConfig)
+          )
+        ],
+        include: ['react', 'react/jsx-dev-runtime', 'react-dom/server', 'react-router']
+      } : undefined
     });
   }
   return environmentOptionsResolvers;
