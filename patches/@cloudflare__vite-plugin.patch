diff --git a/dist/index.js b/dist/index.js
index 260a8e9c18d9fed87cda0d0573ec10f164c308e3..c160aefc52c8c05acd6475616784530861ed0eb6 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1304,6 +1304,7 @@ function createCloudflareEnvironmentOptions(workerConfig, userConfig, environmen
       },
       outDir: getOutputDirectory(userConfig, environmentName),
       ssr: true,
+      target: 'es2022',
       rollupOptions: {
         // Note: vite starts dev pre-bundling crawling from either optimizeDeps.entries or rollupOptions.input
         //       so the input value here serves both as the build input as well as the starting point for
@@ -1316,6 +1317,7 @@ function createCloudflareEnvironmentOptions(workerConfig, userConfig, environmen
     optimizeDeps: {
       // Note: ssr pre-bundling is opt-in and we need to enable it by setting `noDiscovery` to false
       noDiscovery: false,
+      entries: workerConfig.main,
       exclude: [
         ...cloudflareBuiltInModules,
         // we have to exclude all node modules to work in dev-mode not just the unenv externals...
@@ -2261,7 +2263,6 @@ function cloudflare2(pluginConfig = {}) {
                 )
               );
             }
-            writeDeployConfig(resolvedPluginConfig, resolvedViteConfig);
           }
         }
       };
@@ -2339,6 +2340,16 @@ function cloudflare2(pluginConfig = {}) {
         source: JSON.stringify(config)
       });
     },
+    writeBundle() {
+      if (
+        this.environment.name ===
+        (resolvedPluginConfig.type === "assets-only"
+          ? "client"
+          : resolvedPluginConfig.entryWorkerEnvironmentName)
+      ) {
+        writeDeployConfig(resolvedPluginConfig, resolvedViteConfig);
+      }
+    },
     handleHotUpdate(options) {
       if (resolvedPluginConfig.configPaths.has(options.file)) {
         options.server.restart();
@@ -2364,7 +2375,7 @@ function cloudflare2(pluginConfig = {}) {
         return entryWorker.fetch(toMiniflareRequest(request), {
           redirect: "manual"
         });
-      });
+      }, { alwaysCallNext: false });
       handleWebSocket(
         viteDevServer.httpServer,
         entryWorker.fetch,
@@ -2387,7 +2398,7 @@ function cloudflare2(pluginConfig = {}) {
         return miniflare2.dispatchFetch(toMiniflareRequest(request), {
           redirect: "manual"
         });
-      });
+      }, { alwaysCallNext: false });
       handleWebSocket(
         vitePreviewServer.httpServer,
         miniflare2.dispatchFetch,
